Waterfall Process Model:

1. Requirements: approx. 1 week
   - list out requirements for the scheduling system, including user types, database structure, and functionality.
   - understand needs and expectations for each user, what are features that help the flow of the interface

2. System Design: approx. 2 weeks
   - design the overall system architecture, draw mock ups of the database and user interface
   - define the structure and relationships between the database tables and our design

3. Implementation: approx. 4 weeks
   - develop core functions of the scheduling system based on design specs
   - implement the user management system [controls registration, authentication logging in etc. + more role-based access control]
   - build the course management module [allow users to add, search, and modify courses]

4. Testing: approx. 2 weeks
   - test each unit to ensure individual components work correctly and smooth
   - test the integration between each database/module to verify that different modules interact cohesively
   - do whole system testing to validate the overall functionality and user experience


6. Maintenance and Tweaks: remaining time
   - have others test, recieve feedback, and make necessary changes/updates
   - add any small features to enhance the program, anything we would like that could be little or big, within the scope of the time remaining

Incremental Development Model:

Version One: approx. 2 weeks
- create user management system:
  - users able register, log in, other profile management
  - implement role-based access control

Version Two (1st iteration): approx. 3 weeks
- Add course management functionality:
  - students can search available courses
  - instructors can view their course roster
  // ? what other scheduling things can we do? like do we have to do the algorithm to have students give all the courses they need and then from there make a schedule with it

Version Three (2nd iteration): approx. 4 weeks
- course management:
  - students can register for courses and manage their schedule
  - instructors can search for courses and view their own schedule
  - scheduling preferences ??

Version Four (3rd iteration): approx. 2 weeks
- admin functions:
  - ability to add/remove courses and users.
  - add/remove students from courses and manage course rosters
----------------------------------------------------------------------------------------

Integrate and Configure Process Model:

1. Database Management:
   - integrate using SQLite
   - configure the databases according to the system's requirements.

https://visualstudiomagazine.com/articles/2014/02/01/using-sqlite-with-modern-c.aspx

2. User Interface:
   - make sure the terminal fits nicely and is easy to use at first glance.
   - design the user interface for each kind of user

3. Authentication:
   - database for passwords and user access to enfore security and specific permissions

4. Search Abilities:
   - search engine with the database library to search relevent courses

5. Print Schedule:
   - figure out the way we want to be able to print schedules and how to do so
