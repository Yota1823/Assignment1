Waterfall Process Model:

1. Requirements: approx. 1 week 
   - List out requirements for the scheduling system, including user types, database structure, and functionality.
   - Understand needs and expectations for each user, what are features that help the flow of the interface

2. System Design: approx. 2 weeks
   - Design the overall system architecture, draw mock ups of the database and user interface
   - Define the structure and relationships between the database tables and our design

3. Implementation: approx. 4 weeks
   - Develop core functions of the scheduling system based on design specs
   - Implement the user management system [controls registration, authentication logging in etc. + more role-based access control]
   - Build the course management module [allow users to add, search, and modify courses]

4. Testing: approx. 2 weeks
   - Test each unit to ensure individual components work correctly and smooth
   - Test the integration between each database/module to verify that different modules interact cohesively
   - Do whole system testing to validate the overall functionality and user experience


6. Maintenance and Tweaks: remaining time
   - Have others test, recieve feedback, and make necessary changes/updates
   - Add any small features to enhance the program, anything we would like that could be little or big, within the scope of the time remaining
----------------------------------------------------------------------------------------------

Incremental Development Model:// we should definitely do these time frames to stay on track

// version one focusing more on getting the data base together and figuring out what each class will need will be very important and should propbably take one week so if we could fit that into the time frame i think that would work.
Version One: approx. 2 weeks
- create user management system:
  - Users able register, log in, other profile management
  - Implement role-based access control

Version Two (1st iteration): approx. 3 weeks
- Add course management functionality:
  - Students can search available courses
  - Instructors can view their course roster
  // ? what other scheduling things can we do? like do we have to do the algorithm to have students give all the courses they need and then from there make a schedule with it

Version Three (2nd iteration): approx. 4 weeks
- Course management:
  - Students can register for courses and manage their schedule
  - Instructors can search for courses and view their own schedule
  - Scheduling preferences ??

Version Four (3rd iteration): approx. 2 weeks
- Admin functions:
  - Ability to add/remove courses and users.
  - Add/remove students from courses and manage course rosters
  
  // like ending with the admin abilities this should either be first or last. here it might be a good idea to siwch version 2 and 4. but we can discuss more in class.
----------------------------------------------------------------------------------------------

Integrate and Configure Process Model:

1. Database Management:
   - Integrate using SQLite
   - Configure the databases according to the system's requirements.

https://visualstudiomagazine.com/articles/2014/02/01/using-sqlite-with-modern-c.aspx

2. User Interface:
   - Make sure the terminal fits nicely and is easy to use at first glance.
   - Design the user interface for each kind of user

3. Authentication:
   - Database for passwords and user access to enfore security and specific permissions

4. Search Abilities:
   - Search engine with the database library to search relevent courses

5. Print Schedule:
   - Figure out the way we want to be able to print schedules and how to do so
